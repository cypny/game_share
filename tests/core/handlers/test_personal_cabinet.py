import pytest
from unittest.mock import AsyncMock, patch
from aiogram.types import CallbackQuery, User
from sqlalchemy.ext.asyncio import AsyncSession

from game_share_bot.core.callbacks import MenuCallback
from game_share_bot.domain.enums import MenuSection
from game_share_bot.infrastructure.models import User as UserModel


class TestPersonalCabinetHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""

    @pytest.mark.asyncio
    async def test_personal_cabinet_success(self, test_session, mock_callback_query):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        from game_share_bot.core.handlers.menu.personal_cabinet import personal_cabinet

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user_repo = AsyncMock()
        test_user = UserModel(
            id=1,
            tg_id=123,
            phone="+79991234567",
            name="Test User",
            role="user"
        )
        user_repo.get_by_tg_id = AsyncMock(return_value=test_user)

        # –ú–æ–∫–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        with patch('game_share_bot.core.handlers.menu.personal_cabinet.UserRepository', return_value=user_repo):
            await personal_cabinet(mock_callback_query, test_session, AsyncMock())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        mock_callback_query.message.edit_text.assert_called_once()
        call_args = mock_callback_query.message.edit_text.call_args
        assert "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" in call_args[0][0]
        assert "+79991234567" in call_args[0][0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –æ—Ç–≤–µ—Ç
        mock_callback_query.answer.assert_not_called()  # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å answer –ø—Ä–∏ —É—Å–ø–µ—Ö–µ

    @pytest.mark.asyncio
    async def test_personal_cabinet_user_not_found(self, test_session, mock_callback_query):
        """–¢–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"""
        from game_share_bot.core.handlers.menu.personal_cabinet import personal_cabinet

        user_repo = AsyncMock()
        user_repo.get_by_tg_id = AsyncMock(return_value=None)

        with patch('game_share_bot.core.handlers.menu.personal_cabinet.UserRepository', return_value=user_repo):
            await personal_cabinet(mock_callback_query, test_session, AsyncMock())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answer —Å –æ—à–∏–±–∫–æ–π
        mock_callback_query.answer.assert_called_once_with("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        mock_callback_query.message.edit_text.assert_not_called()

    @pytest.mark.asyncio
    async def test_personal_cabinet_exception(self, test_session, mock_callback_query):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        from game_share_bot.core.handlers.menu.personal_cabinet import personal_cabinet

        user_repo = AsyncMock()
        user_repo.get_by_tg_id = AsyncMock(side_effect=Exception("DB error"))

        with patch('game_share_bot.core.handlers.menu.personal_cabinet.UserRepository', return_value=user_repo):
            await personal_cabinet(mock_callback_query, test_session, AsyncMock())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answer —Å –æ—à–∏–±–∫–æ–π
        mock_callback_query.answer.assert_called_once_with("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞")

    @pytest.mark.asyncio
    async def test_manage_subscription(self, mock_callback_query):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        from game_share_bot.core.handlers.menu.personal_cabinet import manage_subscription

        await manage_subscription(mock_callback_query)

        mock_callback_query.answer.assert_called_once_with("üì¶ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    @pytest.mark.asyncio
    async def test_my_queue(self, mock_callback_query):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–µ—Ä–µ–¥–∏"""
        from game_share_bot.core.handlers.menu.personal_cabinet import my_queue

        await my_queue(mock_callback_query)

        mock_callback_query.answer.assert_called_once_with("üìã –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª '–ú–æ—è –æ—á–µ—Ä–µ–¥—å' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    @pytest.mark.asyncio
    async def test_personal_cabinet_state_cleared(self, test_session, mock_callback_query, mock_state):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        from game_share_bot.core.handlers.menu.personal_cabinet import personal_cabinet

        user_repo = AsyncMock()
        test_user = UserModel(
            id=1,
            tg_id=123,
            phone="+79991234567",
            name="Test User",
            role="user"
        )
        user_repo.get_by_tg_id = AsyncMock(return_value=test_user)

        with patch('game_share_bot.core.handlers.menu.personal_cabinet.UserRepository', return_value=user_repo):
            await personal_cabinet(mock_callback_query, test_session, mock_state)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ
        mock_state.clear.assert_called_once()