import pytest
from unittest.mock import AsyncMock, patch, MagicMock
from datetime import datetime
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from game_share_bot.core.callbacks import RentalCallback, MenuCallback
from game_share_bot.domain.enums import MenuSection, RentalStatus, DiscStatus
from game_share_bot.infrastructure.models import Rental, Disc, Game, User as UserModel


class TestRentedDisksHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"""

    @pytest.fixture
    def mock_rental(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –∞—Ä–µ–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        game = Game(id=1, title="Test Game", description="Test Description")
        disc = Disc(disc_id=1, game_id=1, status_id=DiscStatus.RENTED)
        disc.game = game

        user = UserModel(id=1, tg_id=123, phone="+79991234567", name="Test User")

        rental = Rental(
            id=1,
            user_id=1,
            disc_id=1,
            status_id=RentalStatus.ACTIVE,
            start_date=datetime(2024, 1, 1),
            expected_end_date=datetime(2024, 1, 31),
            actual_end_date=None
        )
        rental.disc = disc
        rental.user = user

        return rental

    @pytest.mark.asyncio
    async def test_show_rented_disks_with_rentals(self, test_session, mock_callback_query, mock_rental):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ –∫–æ–≥–¥–∞ –æ–Ω–∏ –µ—Å—Ç—å"""
        from game_share_bot.core.handlers.menu.rented_disks import show_rented_disks

        rental_repo = AsyncMock()
        rental_repo.get_active_rentals_by_user = AsyncMock(return_value=[mock_rental])

        with patch('game_share_bot.core.handlers.menu.rented_disks.RentalRepository', return_value=rental_repo):
            await show_rented_disks(mock_callback_query, test_session)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        mock_callback_query.message.edit_text.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        call_args = mock_callback_query.message.edit_text.call_args
        text = call_args[0][0]
        assert "üì¶ –í–∞—à–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–∏—Å–∫–∏:" in text
        assert "Test Game" in text
        assert "01.01.2024" in text  # start_date
        assert "31.01.2024" in text  # expected_end_date

    @pytest.mark.asyncio
    async def test_show_rented_disks_empty(self, test_session, mock_callback_query):
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ –∫–æ–≥–¥–∞ –∏—Ö –Ω–µ—Ç"""
        from game_share_bot.core.handlers.menu.rented_disks import show_rented_disks

        rental_repo = AsyncMock()
        rental_repo.get_active_rentals_by_user = AsyncMock(return_value=[])

        with patch('game_share_bot.core.handlers.menu.rented_disks.RentalRepository', return_value=rental_repo):
            await show_rented_disks(mock_callback_query, test_session)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ
        mock_callback_query.message.edit_text.assert_called_once()
        call_args = mock_callback_query.message.edit_text.call_args
        assert "üì¶ –£ –≤–∞—Å –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤" in call_args[0][0]

    @pytest.mark.asyncio
    async def test_show_rented_disks_exception(self, test_session, mock_callback_query):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"""
        from game_share_bot.core.handlers.menu.rented_disks import show_rented_disks

        rental_repo = AsyncMock()
        rental_repo.get_active_rentals_by_user = AsyncMock(side_effect=Exception("DB error"))

        with patch('game_share_bot.core.handlers.menu.rented_disks.RentalRepository', return_value=rental_repo):
            await show_rented_disks(mock_callback_query, test_session)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answer —Å –æ—à–∏–±–∫–æ–π
        mock_callback_query.answer.assert_called_once_with("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥–∏—Å–∫–æ–≤")

    @pytest.mark.asyncio
    async def test_return_disk_success(self, test_session, mock_callback_query, mock_rental):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–∏—Å–∫–∞"""
        from game_share_bot.core.handlers.menu.rented_disks import return_disk

        # –°–æ–∑–¥–∞–µ–º callback –¥–∞–Ω–Ω—ã–µ
        callback_data = RentalCallback(action="return", rental_id=1)

        # –ú–æ–∫–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        rental_repo = AsyncMock()
        rental_repo.get_by_id_with_relations = AsyncMock(return_value=mock_rental)
        rental_repo.get_by_id_with_disc = AsyncMock(return_value=mock_rental)
        rental_repo.update_rental_status = AsyncMock(return_value=True)

        disc_repo = AsyncMock()
        disc_repo.update_disc_status = AsyncMock(return_value=True)

        # –ú–æ–∫–∞–µ–º show_rented_disks —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        with patch('game_share_bot.core.handlers.menu.rented_disks.RentalRepository', return_value=rental_repo), \
                patch('game_share_bot.core.handlers.menu.rented_disks.DiscRepository', return_value=disc_repo), \
                patch('game_share_bot.core.handlers.menu.rented_disks.show_rented_disks') as mock_show:
            await return_disk(mock_callback_query, callback_data, test_session)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answer —Å —É—Å–ø–µ—Ö–æ–º
        mock_callback_query.answer.assert_called_once_with(
            "‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–∏—Å–∫–∞ 'Test Game' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω show_rented_disks –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
        mock_show.assert_called_once_with(mock_callback_query, test_session)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å—ã –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
        rental_repo.update_rental_status.assert_called_once_with(1, RentalStatus.PENDING_RETURN)
        disc_repo.update_disc_status.assert_called_once_with(1, DiscStatus.PENDING_RETURN)

    @pytest.mark.asyncio
    async def test_return_disk_rental_not_found(self, test_session, mock_callback_query):
        """–¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä–µ–Ω–¥—ã"""
        from game_share_bot.core.handlers.menu.rented_disks import return_disk

        callback_data = RentalCallback(action="return", rental_id=999)

        rental_repo = AsyncMock()
        rental_repo.get_by_id_with_relations = AsyncMock(return_value=None)

        with patch('game_share_bot.core.handlers.menu.rented_disks.RentalRepository', return_value=rental_repo):
            await return_disk(mock_callback_query, callback_data, test_session)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answer —Å –æ—à–∏–±–∫–æ–π
        mock_callback_query.answer.assert_called_once_with("‚ùå –ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    @pytest.mark.asyncio
    async def test_return_disk_not_user_rental(self, test_session, mock_callback_query, mock_rental):
        """–¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        from game_share_bot.core.handlers.menu.rented_disks import return_disk

        callback_data = RentalCallback(action="return", rental_id=1)

        # –ú–µ–Ω—è–µ–º tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—Ä–µ–Ω–¥–µ
        mock_rental.user.tg_id = 999  # –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

        rental_repo = AsyncMock()
        rental_repo.get_by_id_with_relations = AsyncMock(return_value=mock_rental)

        with patch('game_share_bot.core.handlers.menu.rented_disks.RentalRepository', return_value=rental_repo):
            await return_disk(mock_callback_query, callback_data, test_session)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answer —Å –æ—à–∏–±–∫–æ–π
        mock_callback_query.answer.assert_called_once_with("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏—Å–∫")

    @pytest.mark.asyncio
    async def test_return_disk_update_failed(self, test_session, mock_callback_query, mock_rental):
        """–¢–µ—Å—Ç –∫–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å"""
        from game_share_bot.core.handlers.menu.rented_disks import return_disk

        callback_data = RentalCallback(action="return", rental_id=1)

        rental_repo = AsyncMock()
        rental_repo.get_by_id_with_relations = AsyncMock(return_value=mock_rental)
        rental_repo.get_by_id_with_disc = AsyncMock(return_value=mock_rental)
        rental_repo.update_rental_status = AsyncMock(return_value=False)  # –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        disc_repo = AsyncMock()
        disc_repo.update_disc_status = AsyncMock(return_value=True)

        with patch('game_share_bot.core.handlers.menu.rented_disks.RentalRepository', return_value=rental_repo), \
                patch('game_share_bot.core.handlers.menu.rented_disks.DiscRepository', return_value=disc_repo):
            await return_disk(mock_callback_query, callback_data, test_session)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answer —Å –æ—à–∏–±–∫–æ–π
        mock_callback_query.answer.assert_called_once_with("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∏—Å–∫–∞")

    @pytest.mark.asyncio
    async def test_return_disk_exception(self, test_session, mock_callback_query):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–∏—Å–∫–∞"""
        from game_share_bot.core.handlers.menu.rented_disks import return_disk

        callback_data = RentalCallback(action="return", rental_id=1)

        rental_repo = AsyncMock()
        rental_repo.get_by_id_with_relations = AsyncMock(side_effect=Exception("DB error"))

        with patch('game_share_bot.core.handlers.menu.rented_disks.RentalRepository', return_value=rental_repo):
            await return_disk(mock_callback_query, callback_data, test_session)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω answer —Å –æ—à–∏–±–∫–æ–π
        mock_callback_query.answer.assert_called_once_with("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∏—Å–∫–∞")

    @pytest.mark.asyncio
    async def test_format_rented_disks_message(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–∞—Ö"""
        from game_share_bot.core.handlers.menu.rented_disks import _format_rented_disks_message

        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
        empty_message = _format_rented_disks_message([])
        assert empty_message == "üì¶ –£ –≤–∞—Å –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"

        # –¢–µ—Å—Ç —Å –æ–¥–Ω–æ–π –∞—Ä–µ–Ω–¥–æ–π
        game = Game(title="Game 1")
        disc = Disc(game=game)
        rental = Rental(
            disc=disc,
            start_date=datetime(2024, 1, 1),
            expected_end_date=datetime(2024, 1, 31),
            status_id=RentalStatus.ACTIVE
        )

        message = _format_rented_disks_message([rental])
        assert "Game 1" in message
        assert "01.01.2024" in message
        assert "31.01.2024" in message

        # –¢–µ—Å—Ç —Å –∞—Ä–µ–Ω–¥–æ–π –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        rental_pending = Rental(
            disc=disc,
            start_date=datetime(2024, 1, 1),
            expected_end_date=datetime(2024, 1, 31),
            status_id=RentalStatus.PENDING_RETURN
        )

        message_pending = _format_rented_disks_message([rental_pending])
        assert "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º" in message_pending

    @pytest.mark.asyncio
    async def test_validate_rental_return_success(self, test_session, mock_rental):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã"""
        from game_share_bot.core.handlers.menu.rented_disks import _validate_rental_return

        rental_repo = AsyncMock()
        rental_repo.get_by_id_with_relations = AsyncMock(return_value=mock_rental)

        with patch('game_share_bot.core.handlers.menu.rented_disks.RentalRepository', return_value=rental_repo):
            is_valid, game_title = await _validate_rental_return(1, 123, test_session)

        assert is_valid is True
        assert game_title == "Test Game"

    @pytest.mark.asyncio
    async def test_process_disk_return_success(self, test_session, mock_rental):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∏—Å–∫–∞"""
        from game_share_bot.core.handlers.menu.rented_disks import _process_disk_return

        rental_repo = AsyncMock()
        rental_repo.get_by_id_with_disc = AsyncMock(return_value=mock_rental)
        rental_repo.update_rental_status = AsyncMock(return_value=True)

        disc_repo = AsyncMock()
        disc_repo.update_disc_status = AsyncMock(return_value=True)

        with patch('game_share_bot.core.handlers.menu.rented_disks.RentalRepository', return_value=rental_repo), \
                patch('game_share_bot.core.handlers.menu.rented_disks.DiscRepository', return_value=disc_repo):
            result = await _process_disk_return(1, test_session)

        assert result is True
        rental_repo.update_rental_status.assert_called_once_with(1, RentalStatus.PENDING_RETURN)
        disc_repo.update_disc_status.assert_called_once_with(1, DiscStatus.PENDING_RETURN)