from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession


from game_share_bot.core.callbacks import CatalogCallback, MenuCallback
from game_share_bot.core.keyboards import return_kb, get_game_detail_kb
from game_share_bot.infrastructure.repositories import GameRepository, DiscRepository, RentalRepository, UserRepository
from game_share_bot.infrastructure.utils import get_logger


router = Router()
logger = get_logger(__name__)


@router.callback_query(CatalogCallback.filter())
async def catalog(callback: CallbackQuery, callback_data: CatalogCallback, session: AsyncSession):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –∫–∞—Ç–∞–ª–æ–≥")

    try:
        game_repo = GameRepository(session)
        games = await game_repo.get_all()

        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(games)} –∏–≥—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã –≤ –Ω—É–∂–Ω–æ–º —Å—Ç–∏–ª–µ
        games_list = []
        for game in games:
            game_text = f"üéÆ {game.title}\n\n{game.description}\n\n<code>/game_{game.id}</code>"
            games_list.append(game_text)

        games_str = "\n\n---\n\n".join(games_list)
        reply = f"–ö–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä ({len(games)}):\n\n{games_str}"

        await callback.answer()
        await callback.message.edit_text(
            reply,
            parse_mode="HTML",
            reply_markup=return_kb(MenuCallback(section="main"))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ä–∞–±–æ—Ç–∞—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        logger.info(f"–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞")



@router.message(F.text.startswith("/game_"))
async def cmd_game(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ: {message.text}")

    try:
        game_repo = GameRepository(session)
        disc_repo = DiscRepository(session)
        rental_repo = RentalRepository(session)
        user_repo = UserRepository(session)

        game_id = int(message.text.split('_')[1])
        logger.debug(f"–ü–æ–∏—Å–∫ –∏–≥—Ä—ã —Å ID: {game_id}")

        game = await game_repo.get_by_id(game_id)
        if game is None:
            logger.warning(f"–ò–≥—Ä–∞ {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await user_repo.get_by_tg_id(user_id)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤
        available_discs_count = await disc_repo.get_available_discs_count_by_game(game_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ —ç—Ç–æ–π –∏–≥—Ä—ã
        has_active_rental = False
        if user:
            active_rental = await rental_repo.get_active_rental_by_user_and_game(user.id, game_id)
            has_active_rental = active_rental is not None

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if has_active_rental:
            availability_text = "‚úÖ –í—ã —É–∂–µ –≤–∑—è–ª–∏ —ç—Ç—É –∏–≥—Ä—É"
            is_available = False
        elif available_discs_count > 0:
            availability_text = f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –¥–∏—Å–∫–æ–≤: {available_discs_count}"
            is_available = True
        else:
            availability_text = "‚ùå –í—Å–µ –¥–∏—Å–∫–∏ –∑–∞–Ω—è—Ç—ã"
            is_available = False

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
        reply = (
            f"üéÆ <b>{game.title}</b>\n\n"
            f"{game.description}\n\n"
            f"{availability_text}\n\n"
            f"<code>/game_{game.id}</code>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–æ–π
        if game.cover_image_url:
            await message.answer_photo(
                photo=game.cover_image_url,
                caption=reply,
                parse_mode="HTML",
                reply_markup=get_game_detail_kb(game.id, is_available and not has_active_rental)
            )
        else:
            await message.answer(
                reply,
                parse_mode="HTML",
                reply_markup=get_game_detail_kb(game.id, is_available and not has_active_rental)
            )

        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ {game_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except ValueError:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–≥—Ä—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message.text}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /game_1")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ")


@router.callback_query(F.data.startswith("take_game_"))
async def take_game(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–∑—è—Ç—å –∏–≥—Ä—É' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã"""
    user_id = callback.from_user.id
    game_id = int(callback.data.split("_")[2])

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∑—è—Ç—å –∏–≥—Ä—É {game_id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        game_repo = GameRepository(session)
        disc_repo = DiscRepository(session)
        rental_repo = RentalRepository(session)
        user_repo = UserRepository(session)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_repo.get_by_tg_id(user_id)
        if not user:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥—ã —ç—Ç–æ–π –∏–≥—Ä—ã
        existing_rental = await rental_repo.get_active_rental_by_user_and_game(user.id, game_id)
        if existing_rental:
            await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ –∏–≥—Ä–∞ –Ω–∞ —Ä—É–∫–∞—Ö")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∏—Å–∫–æ–≤
        available_disc = await disc_repo.get_available_disc_by_game(game_id)
        logger.info(f"–ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–∏—Å–∫: {available_disc}")

        if not available_disc:
            await callback.answer("‚ùå –í—Å–µ –¥–∏—Å–∫–∏ —ç—Ç–æ–π –∏–≥—Ä—ã –∑–∞–Ω—è—Ç—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
        game = await game_repo.get_by_id(game_id)
        if not game:
            await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã: user_id={user.id}, disc_id={available_disc.disc_id}")

        # –°–æ–∑–¥–∞–µ–º –∞—Ä–µ–Ω–¥—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏—Å–∫–∞
        rental = await rental_repo.create_rental(user.id, available_disc.disc_id)
        logger.info(f"–ê—Ä–µ–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {rental.id}")

        result = await disc_repo.update_disc_status(available_disc.disc_id, 2)  # 2 = rented
        logger.info(f"–°—Ç–∞—Ç—É—Å –¥–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {result}")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤
        available_discs_count = await disc_repo.get_available_discs_count_by_game(game_id)

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª –∏–≥—Ä—É {game_id} (–¥–∏—Å–∫ {available_disc.disc_id})")
        await callback.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∏–≥—Ä—É '{game.title}'!")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        availability_text = f"‚úÖ –í—ã —É–∂–µ –≤–∑—è–ª–∏ —ç—Ç—É –∏–≥—Ä—É\nüìÄ –û—Å—Ç–∞–ª–æ—Å—å –¥–∏—Å–∫–æ–≤: {available_discs_count}"

        updated_reply = (
            f"üéÆ <b>{game.title}</b>\n\n"
            f"{game.description}\n\n"
            f"{availability_text}\n\n"
            f"<code>/game_{game.id}</code>"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if callback.message.photo:
            await callback.message.edit_caption(
                caption=updated_reply,
                parse_mode="HTML",
                reply_markup=get_game_detail_kb(game.id, False)
                # is_available = False, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∑—è–ª –∏–≥—Ä—É
            )
        else:
            await callback.message.edit_text(
                updated_reply,
                parse_mode="HTML",
                reply_markup=get_game_detail_kb(game.id, False)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∏–≥—Ä—ã {game_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∏–≥—Ä—ã")

