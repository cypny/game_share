from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from game_share_bot.core.callbacks import MenuCallback, RentalCallback
from game_share_bot.core.keyboards.inline import return_kb
from game_share_bot.infrastructure.repositories import RentalRepository, DiscRepository
from game_share_bot.infrastructure.utils import get_logger

router = Router()
logger = get_logger(__name__)


def _format_rented_disks_message(rentals: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"""
    if not rentals:
        return "üì¶ –£ –≤–∞—Å –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"

    disks_list = []
    for rental in rentals:
        game_title = rental.disc.game.title
        disk_info = f"üéÆ {game_title} - —ç–∫–∑–µ–º–ø–ª—è—Ä {rental.disc.disc_id}"
        disks_list.append(disk_info)

    disks_str = "\n\n".join(disks_list)
    return f"üì¶ –í–∞—à–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–∏—Å–∫–∏:\n\n{disks_str}"


def _create_rentals_keyboard(rentals: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏—Å–∫–∞"""
    keyboard_buttons = []

    for rental in rentals:
        button_text = f"üîô –í–µ—Ä–Ω—É—Ç—å {rental.disc.game.title}"
        keyboard_buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=RentalCallback(action="return", rental_id=rental.id).pack()
            )
        ])

    keyboard_buttons.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=MenuCallback(section='personal').pack()
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)


async def _get_user_rentals(user_id: int, session: AsyncSession) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    rental_repo = RentalRepository(session)
    return await rental_repo.get_active_rentals_by_user(user_id)


@router.callback_query(MenuCallback.filter(F.section == "rented_disks"))
async def show_rented_disks(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤")

    try:
        rentals = await _get_user_rentals(user_id, session)
        text = _format_rented_disks_message(rentals)
        markup = _create_rentals_keyboard(rentals) if rentals else return_kb(MenuCallback(section='personal'))

        await callback.message.edit_text(text, reply_markup=markup)
        logger.info(f"–°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥–∏—Å–∫–æ–≤")


async def _validate_rental_return(rental_id: int, user_id: int, session: AsyncSession) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã"""
    rental_repo = RentalRepository(session)
    rental = await rental_repo.get_by_id_with_relations(rental_id)

    if not rental:
        return False, "‚ùå –ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    if rental.user.tg_id != user_id:
        return False, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏—Å–∫"

    return True, rental.disc.game.title


async def _process_disk_return(rental_id: int, session: AsyncSession) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –¥–∏—Å–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã"""
    rental_repo = RentalRepository(session)
    disc_repo = DiscRepository(session)

    try:
        rental = await rental_repo.get_by_id_with_disc(rental_id)
        if not rental:
            return False

        success_rental = await rental_repo.update_rental_status(rental_id, 2)
        success_disc = await disc_repo.update_disc_status(rental.disc_id, 1)

        return success_rental and success_disc
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∏—Å–∫–∞: {str(e)}")
        return False


@router.callback_query(RentalCallback.filter(F.action == "return"))
async def return_disk(callback: CallbackQuery, callback_data: RentalCallback, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∏—Å–∫–∞"""
    user_id = callback.from_user.id
    rental_id = callback_data.rental_id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å –¥–∏—Å–∫ –ø–æ –∞—Ä–µ–Ω–¥–µ {rental_id}")

    try:
        is_valid, game_title = await _validate_rental_return(rental_id, user_id, session)
        if not is_valid:
            await callback.answer(game_title)
            return

        success = await _process_disk_return(rental_id, session)
        if not success:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–∏—Å–∫–∞")
            return

        await callback.answer(f"‚úÖ –î–∏—Å–∫ '{game_title}' —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω!")
        await show_rented_disks(callback, session)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª –¥–∏—Å–∫ {rental_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–∏—Å–∫–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–∏—Å–∫–∞")