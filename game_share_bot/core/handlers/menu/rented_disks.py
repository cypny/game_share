from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from game_share_bot.core.callbacks import MenuCallback, RentalCallback
from game_share_bot.core.keyboards import return_kb, rentals_kb
from game_share_bot.domain.enums import RentalStatus, DiscStatus, MenuSection
from game_share_bot.infrastructure.models import Rental
from game_share_bot.infrastructure.repositories import RentalRepository, DiscRepository
from game_share_bot.infrastructure.utils import get_logger

router = Router()
logger = get_logger(__name__)


# rented_disks.py - —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
def _format_rented_disks_message(rentals: list[Rental]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"""
    if not rentals:
        return "üì¶ –£ –≤–∞—Å –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"

    disks_list = []
    for rental in rentals:
        game_title = rental.disc.game.title
        start_date = rental.start_date.strftime("%d.%m.%Y")
        end_date = rental.expected_end_date.strftime("%d.%m.%Y")

        disk_info = (
            f"üéÆ {game_title}\n"
            f"üìÖ –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {start_date}\n"
            f"‚è∞ –°–¥–∞—Ç—å –¥–æ: {end_date}"
        )

        if rental.status_id == RentalStatus.PENDING_RETURN:
            disk_info += "\n‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"

        disks_list.append(disk_info)

    disks_str = "\n\n".join(disks_list)
    return f"üì¶ –í–∞—à–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–∏—Å–∫–∏:\n\n{disks_str}"


async def _get_user_rentals(user_id: int, session: AsyncSession) -> list[Rental]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    rental_repo = RentalRepository(session)
    return await rental_repo.get_active_rentals_by_user(user_id)


@router.callback_query(MenuCallback.filter_by_section(MenuSection.RENTED_DISKS))
async def show_rented_disks(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤")

    try:
        rentals = await _get_user_rentals(user_id, session)
        text = _format_rented_disks_message(rentals)
        markup = rentals_kb(rentals) if rentals else return_kb(MenuCallback(section=MenuSection.PERSONAL_CABINET))

        await callback.message.edit_text(text, reply_markup=markup)
        logger.info(f"–°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –¥–∏—Å–∫–æ–≤")


async def _validate_rental_return(rental_id: int, user_id: int, session: AsyncSession) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã"""
    rental_repo = RentalRepository(session)
    rental = await rental_repo.get_by_id_with_relations(rental_id)

    if not rental:
        return False, "‚ùå –ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    if rental.user.tg_id != user_id:
        return False, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏—Å–∫"

    return True, rental.disc.game.title


async def _process_disk_return(rental_id: int, session: AsyncSession) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–∏—Å–∫–∞ (—Å—Ç–∞–≤–∏—Ç –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)"""
    rental_repo = RentalRepository(session)
    disc_repo = DiscRepository(session)

    try:
        rental = await rental_repo.get_by_id_with_disc(rental_id)
        if not rental:
            return False

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" –¥–ª—è –∞—Ä–µ–Ω–¥—ã –∏ –¥–∏—Å–∫–∞
        success_rental = await rental_repo.update_rental_status(rental_id, RentalStatus.PENDING_RETURN)
        success_disc = await disc_repo.update_disc_status(rental.disc_id, DiscStatus.PENDING_RETURN)

        return success_rental and success_disc
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∏—Å–∫–∞: {str(e)}")
        return False


@router.callback_query(RentalCallback.filter(F.action == "return"))
async def return_disk(callback: CallbackQuery, callback_data: RentalCallback, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∏—Å–∫–∞"""
    user_id = callback.from_user.id
    rental_id = callback_data.rental_id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–µ—Ä–Ω—É—Ç—å –¥–∏—Å–∫ –ø–æ –∞—Ä–µ–Ω–¥–µ {rental_id}")

    try:
        is_valid, game_title = await _validate_rental_return(rental_id, user_id, session)
        if not is_valid:
            await callback.answer(game_title)
            return

        success = await _process_disk_return(rental_id, session)
        if not success:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∏—Å–∫–∞")
            return

        await callback.answer(f"‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–∏—Å–∫–∞ '{game_title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        await show_rented_disks(callback, session)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤–æ–∑–≤—Ä–∞—Ç –¥–∏—Å–∫–∞ {rental_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∏—Å–∫–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∏—Å–∫–∞")
