from aiogram import Router, F
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from game_share_bot.core.callbacks import AdminCallback, RentalCallback
from game_share_bot.core.keyboards import return_to_admin_panel_kb, rental_actions_confirmation_kb
from game_share_bot.domain.enums import AdminAction, RentalStatus
from game_share_bot.infrastructure.models import Rental
from game_share_bot.infrastructure.repositories import RentalRepository
from game_share_bot.infrastructure.utils import get_logger

router = Router()
logger = get_logger(__name__)


def _format_pending_returns_message(rentals: list[Rental]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç"""
    if not rentals:
        return "üìã –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"

    returns_list = []
    for rental in rentals:
        user_info = f"üë§ @{rental.user.name} (ID: {rental.user.tg_id})"
        game_info = f"üéÆ {rental.disc.game.title} - –î–∏—Å–∫ {rental.disc.disc_id}"
        return_info = f"üìÖ –ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã: {rental.start_date.strftime('%d.%m.%Y')}"

        full_info = f"{user_info}\n{game_info}\n{return_info}"
        returns_list.append(full_info)

    returns_str = "\n\n".join(returns_list)
    return f"üìã –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç ({len(rentals)}):\n\n{returns_str}"


@router.callback_query(AdminCallback.filter_by_action(AdminAction.VIEW_RETURN_REQUESTS))
async def show_return_requests(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = callback.from_user.id
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç")

    try:
        rental_repo = RentalRepository(session)
        pending_returns = await rental_repo.get_rentals_by_status(RentalStatus.PENDING_RETURN)

        text = _format_pending_returns_message(pending_returns)
        markup = rental_actions_confirmation_kb(pending_returns, "return") if pending_returns else return_to_admin_panel_kb()

        await callback.message.edit_text(text, reply_markup=markup)
        logger.info(f"–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç")


@router.callback_query(RentalCallback.filter(F.action == "confirm_return"))
async def confirm_return_request(callback: CallbackQuery, callback_data: RentalCallback, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –¥–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_id = callback.from_user.id
    rental_id = callback_data.rental_id

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∞—Ä–µ–Ω–¥—ã {rental_id}")

    try:
        rental_repo = RentalRepository(session)
        success = await rental_repo.confirm_return(rental_id)

        if not success:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞")
            return

        await callback.answer("‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        await show_return_requests(callback, session)
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–æ–∑–≤—Ä–∞—Ç –∞—Ä–µ–Ω–¥—ã {rental_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞")


@router.callback_query(RentalCallback.filter(F.action == "reject_return"))
async def reject_return_request(callback: CallbackQuery, callback_data: RentalCallback, session: AsyncSession):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –¥–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_id = callback.from_user.id
    rental_id = callback_data.rental_id

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∞—Ä–µ–Ω–¥—ã {rental_id}")

    try:
        rental_repo = RentalRepository(session)
        success = await rental_repo.reject_return(rental_id)

        if not success:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞")
            return

        await callback.answer("‚ùå –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        await show_return_requests(callback, session)
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–æ–∑–≤—Ä–∞—Ç –∞—Ä–µ–Ω–¥—ã {rental_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞")
